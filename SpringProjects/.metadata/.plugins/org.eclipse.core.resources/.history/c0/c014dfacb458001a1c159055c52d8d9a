package es.eoi.controller;

import java.lang.reflect.Type;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import es.eoi.dto.CuentaDto;
import es.eoi.entity.Banco;
import es.eoi.entity.Cliente;
import es.eoi.entity.Cuenta;
import es.eoi.service.BancoService;
import es.eoi.service.ClienteService;
import es.eoi.service.CuentaService;

@RestController
@RequestMapping(value = "/cuenta")
public class CuentaController {

	@Autowired
	CuentaService cuentaserv;
	@Autowired
	BancoService bancoserv;
	@Autowired
	ClienteService clienteserv;

	@Autowired
	private ModelMapper modelmapper;

	@PostMapping(params={"dni","nombanco","saldo"})
	public String crearCuenta(@RequestParam (value="dni") String dni, @RequestParam (value="nombanco") String nombanco, @RequestParam (value="saldo") int saldo) {
		//TODO
		Cliente cli = clienteserv.buscarCliente(dni).get();
		Banco banc = bancoserv.buscarBancobyName(nombanco);
		
		if (cli==null||banc==null)
			return "No existe el banco o el cliente";
		else {
			Cuenta cuenta=new Cuenta(saldo,cli,banc);
			cuentaserv.InsertarCuenta(cuenta);
			return "Metemos cuenta";
			}
		 
		}

	@DeleteMapping(value = "/{id}")
	@ResponseStatus(value = HttpStatus.NO_CONTENT)
	public void removeCuenta(@PathVariable(value = "id") int id) {

		cuentaserv.removeCuenta(id);

	}

	@GetMapping
	public List<CuentaDto> mostrarCuenta() {
		Type listType = new TypeToken<List<CuentaDto>>() {
		}.getType();
		List<CuentaDto> listcuentdto = modelmapper.map(cuentaserv.MostrarCuenta(), listType);
		return listcuentdto;
	}

	@PutMapping(value = "/add",params={"dni","nombanco","money"})
	@ResponseStatus(value = HttpStatus.NO_CONTENT)
	public String putMoney(@RequestParam (value="dni") String dni, @RequestParam (value="nombanco") String nombanco, @RequestParam (value="money") int money) {
		Cliente cli = clienteserv.buscarCliente(dni).get();
		Banco banc = bancoserv.buscarBancobyName(nombanco);
		
		if (cli==null||banc==null)
			return "No existe el banco o el cliente";
		else {
			Cuenta cuenta= cuentaserv.buscarCuenta(dni,banc.getId());
			cuenta.addMoney(money);
			return "Metemos cuenta";
		}
	}

	@RequestMapping(value = "/{dni}&{nbanco}", method = RequestMethod.GET)
	public CuentaDto selectCuenta(@PathVariable(value = "dni") String dni,@PathVariable(value = "nbanco") String nbanco ) {
		Banco banc = bancoserv.buscarBancobyName(nbanco);
		CuentaDto cuentadto = new CuentaDto(cuentaserv.buscarCuenta(dni,banc.getId()));
		
		return cuentadto;
	}
}
